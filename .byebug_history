c
n
@post.location
c
post.location
post.location.place
post.location
post
mpost
c
jjc
c
n
params[:id]
c
Location.find(params[:id]).posts
Location.find(params[:id])
c
n
c
Location.find(params[:id]).to_json
Location.find(params[:id])
params[:id]
c
n
c
p.save
p
p.location_id = 1
p = current_user.posts.last
current_user.posts.last.location_id
current_user.posts.last.location_id = 1
current_user.posts.last.location_id
urrent_user.posts.last.location_id
Location.find_by(place: @location.place).id
Location.find_by(place: @location.place)
@location
Location.find_by(place:
n
@location
n
@location
n
Post.all.last
c
n
c
current_user.posts.last.location_id
current_user.posts.last
current_user.posts
Post.last.location_id
Post.last.caption
Post.last.location_id
Post.last.image_id
Post.last
current_user
params[:location]
params
c
params[:location]
params[:location][0]
JSON.parse(params[:location])
json.parse(params[:location])
params[:location][0]
params[:location].0
params[:location]["0"]
params[:location][0]
params[:location]
params[:location][:long_name]
params[:location]
params
location
c
params[:location][:formatted_address]
params[:location].formatted_address
params[:location][:formatted_address]
params[:location]
params
location_params
c
params[:location]
params.location
params[:location]
c
params["location"]
params
c
params
c
Tag.find_by(tag_name: tag[1..-1]).id
Tag.find_by(tag_name: tag[1..-1])
Tag.find_by(tag_name: tag)
tag
n
tag
Post.last.destroy
c
tag
Tag.find_by(tag_name: tag[1..-1])
Tag.find_by(tag_name: tag)
tag
n
tag
c
Tagging
self.id
self
this
params
c
@tag.posts
@posts
c
cc
c
v
@user
n
c
n
params[:id]
params
c
n
c
git add -A
c
tags
c
tags
c
word
c
tagss
c
tagss
ntagss
c
n
word
c
tags
c
tags
word
n
word[0]
word
c
word[0] == 'h'
word[0]
word
c
n
s
self.caption.split.each do |word| end
self.caption.split.each do |word|
self.caption.split.each
self.comments.map
self.caption.split.class.map
self.caption.split.class.each
self.caption.split.class
self.caption
   13:     end
   12:       
self.caption.split.each do |word|
   13:     end
   12:       
self.caption.split.each do |word|
self.caption.split.length
self.caption.split
self.caption
self
c
n
s
c
n
word
c
@post.caption
c
@post
n
c
params[:id]
c
current_user
@user
stoken2
stoken
c
current_user.update({user_pic: params[:user][:user_pic]})
current_user.update(params[:user][:user_pic])
params[:user][:user_pic]
current_user.update(user_pic)
current_user.update
params[:user]
params[:user][:user_pic]
params[:user]
user_params
User.new(user_params)
params
user_params
c
@comment.post.comments
@comment.post
c
user_params
c
params
user_params
c
@posts
current_user.is_following?(@user)
current_user
c
n
current_user
n
@user
current_user
reload!
c
Follow.where(["user_id = ? and follower_id = ?", 2, 1 ])[0]
Follow.all
Follow.where(["user_id = ? and follower_id = ?", 1, 2 ])[0]
this_user
current_user.id
Follow.all
@user
c
Follow.destroy_all
Follow.all
Follow
Follow.all
@user
c
@user[0]
@user.destroy
@user
c
Follow.where(["user_id = ? and follower_id = ?", 1, 2 ])
Follow.where('user_id' == 1, 'follower_id' == 2)
Follow.select('user_id' == 1)
Follow.select('user_id' == 1, 'follower_id' == 2)
Follow.where('user_id' == 1, 'follower_id' == 2)
Follow.all.length
Follow.all
Follow.where('user_id' == 1, 'follower_id' == 2).length
Follow.where('user_id' == 1, 'follower_id' == 2)
Follow.all
Follow.al
Follow.where("'user_id' == 1 AND 'follower_id' == 2")
Follow.where('user_id' == 1 AND 'follower_id' == 2)
Follow.where('user_id' == 1 AND follower_id == 2)
