quit
stuff.length
stuff
c
stuff
c
stuff
c
stuff
c
stuff
c
stuff
c
User.page(1)
params.page
params["page"]
params[page]
params
c
params
c
params
c
params
c
cc
c
cc
c
(elapsed / 60) / 24
elapsed / 60
if elapsed / 60
elapsed / 60
elapsed
c
elapsed
c
params[:user][:body]
@user
c
@post
@location
c
n
location
c
 + 1
@comments.length
page_num
c
 + 1
3/4
@comments.length/ per
@comments.length - 1 / per
@comments.length - 1
@comments.length/ per
@comments.length
page_num
c
page_num
c
page_num
c
n
page_num
per
c
page_num
@comments
c
self
this
json
c
params[:pageNum]
c
params[:pageNum]
c
params
c
params
c
cc
  Rendered api/posts/_post.json.jbuilder (4.8ms)
  User Load (0.3ms)  SELECT "users".* FROM "users" INNER JOIN "likes" ON "users"."id" = "likes"."user_id" WHERE "likes"."post_id" = $1 AND (user_id = 1)  [["post_id", 29]]
c
current_user.liked_posts
c
reload!
current_user.liked_posts
current_user
Like.where(user_id: current_user.id)c
Like.where(user_id: current_user.id)
Like.find_by(user_id: current_user.id).joins(posts)
Like.find_by(user_id: current_user.id).joins(:posts)
Like.find_by(user_id: current_user.id).joins(posts)
Like.where(user_id: current_user.id)
Like.find_by(user_id: current_user.id)
Like.find_by(user_id: current_user.id).posts
Post
Post.find
Like.find_by(user_id: current_user.id).posts
Like.find_by(user_id: current_user.id)
c
!post.user_likes.find_by(username: "safsd").nil?
!post.user_likes.find_by(username: self.username).nil?
self.username
self
current_user
post.user_likes.find_by(username: current_user.username)
post.user_likes.find_by(username: "Scott")
post.user_likes.find_by(username: "Scotts")
post.user_likes.find_by(username: "Scott")
post.user_likes
post
Post.user_likes
c
post.user_likes
c
post.user_likes.all
post.user_likes
post
c
Follow
Follows
followed_user_ids
c
Post.where(user_id: (followed_user_ids.push( current_user.id)))
Post.where(user_id: (1,2,3))
Post.where(user_id: (followed_user_ids + current_user.id))
Post.where("user_id in [1,2,3]")
Post.where("user_id = 1")
c
current_user.follows.map(&:user_id)
current_user.follows.map(&user_id)
current_user.follows
c
current_user.follows
current_user
c
n
self.errors
errors
@post
n
@post
c
arr
c
self
hello
c
comment.user
comment
c
post.comments.map
post.comments
post
c
n
c
git add -A
c
s
n
s
n
result.class
result
c
@search_results
c
PgSearch.multisearch(params[:query]).includes(:searchable)
PgSearch.multisearch(params[:query])
params
c
@like
c
Like.find_by(user_id: current_user.id, post_id: params[:like][:post_id])
Like.find_by(:user_id: current_user.id)
Like.find_by(:user_id: current_user.id, post_id: params[:like][:post_id])
Like.find(1)
self.params
this
c
current_user.likes_post?(post.id)
c
current_user.likes_post?(post.id)
c
current_user.likes_post?(post)c
current_user.likes_post?(post)
current_user.likes_post?
current_user
current_user.likes_post?(post)
c
p.user_likes.where("user_id = ?", current_user.id).length == 1
p.user_likes.where("user_id = ?", current_user.id).length
p.user_likes.where("user_id = ?", current_user.id)
p.user_likes.where("user_id = 2")
p.user_likes.where("user_id = 1")
p.user_likes.where("")
p.user_likes.includes(current_user)
p.user_likes
current_user
p.user_likes.includes(current_user)
p.user_likes
p.user_likes.length
p.user_likes
p = Post.last
p.user_likes
c
reload!
p.user_likes
p.likes
p.likes.users
current_user.likes
User.likes
p.likes
p = Post.last
Post.last
p.likes
p
p = Post.find(2)
Post.find(2)
_
Post.find(2)
Like.find(2)
current_user.likes
post
current_user
user.likes
post.likes
post
c
n
c
n
@like
n
like_params
c
params
like_params
c
n
@user
n
list
params
c
n
@post.location
c
post.location
post.location.place
